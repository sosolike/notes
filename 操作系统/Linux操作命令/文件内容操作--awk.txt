awk简介：
    1：awk功能：
        awk是linux上对文件内容进行处理的工具，是一种编程语言，可以对文件内容按行处理，倾向于对行进行分割并处理分割之后的字段；支持以下功能：
        1：逐行读取文件内容，并允许按照条件对文件内容行进行过滤；
        2：支持按照指定的分割方式将每一个内容行分割为若干个字段；
        3：支持通过编程的方式对文件每一行内容进行处理；
    2：awk数据源：
        awk的数据源可以是标准输入、一个或多个文件、其他命令的输出；

awk语法：
    1：awk语法结构：
        awk params 'BEGIN {action} condition{action} END {actoin}' data
        说明：
            params: 执行awk程序时的参数，常取一下几种值：
                    -f progfile         #从脚本文件中读取awk命令，progfile是文件脚本文件路径；
                    -F fs               #用来指定输入分割符，指定分割内容行的分隔符，如：-F- 即使用'-'来将一行数据分割为多个字段；
                    -v var=val          #用来接收外部的变量；

            BEGIN {action}: BEGIN模式，由BEGIN关键字和执行代码{action}构成。
                            属于可选模式，即可以没有该部分；
                            在处理文件内容之前执行；
            
            condition{action}: 文件内容处理部分，由行过滤条件condition和文件内容处理代码{action}构成，每读取一行即执行一遍{action}代码；
                                condition：行过滤条件，即符合条件的行才会进一步分割并执行{action}代码，如果不符合条件则直接处理下一行；
                                           可以是条件表达式，如:$1=="a"    #数据行被分割之后第一个字段为a才会被进一步处理
                                                正则表达式，如:/^a/      #数据行以a开头才会进一步处理；
                                {action}：对符合condition条件的每一行处理的代码；
            
            END {action}: END模式，由END关键字个执行代码{action}构成；
                          属于可选模式，即可以没有该部分；
                          在处理完文件内容之后才会执行；

            data: awk的数据源，可以是一个/多个文件、其他命令的输出、标准输入;
    2：awk语法内容：
        1：awk中的变量：
            1：内置变量：
                $n : 当前数据行被分割之后的第几个字段，起始值从1开始；
                $0 : 当前数据行内容
                $NF : 当前行最后一个字段
                NF : 当前行被分割之后的字段数
                NR : 正在处理的记录数,该值表示当前行在awk处理过的数据中的行数
                FNR :  正在处理的记录在文件中的行号，该值表示当前正在处理的记录在当前文件中的行数
                FILENAME : 当前文件名称
                FS : 字段分隔符，默认是空格，使用时可以在BEGIN和condition语句块中使用(END中也可以使用，但设置无效)，如：FS=":",表示数据行使用:分割得到字段，字段分割符也可通过params中的-F:来设置；
                RS : 行分隔符，默认是换行符，使用时可以在BEGIN和condition语句块中使用(END中也可以使用，但设置无效)，如：RS=":",表示对文件内容使用:分割得到数据行；
                OFS : 表示输出处理好的文本内容时字段的分隔符，使用时可以在BEGIN和condition语句块中使用，OFS=":" 表示记录使用:来分割；
                ORS : 表示输出处理完成的文本内容时行的分隔符,使用时可以在BEGIN和condition语句块中使用，ORS=":" 表示记录使用:来分割；

                ERRNO : 返回最后一个系统错误描述
                ENVIORN : 环境变量关联数组
                ARGIND : 命令行中当前文件的位置
                ARGC : 命令行参数数量
                OFMT : %.6g:表示小数保留6位数
            2：自定义变量：
                1：定义方式：
                    变量名=变量值     
                2：定义位置即作用域：
                    在BEGIN模式中定义，可以在定义之后的BEGIN代码块中、condition代码块中、END代码块中使用；
                    在condition中定义，可以在定义之后的condition代码块中、END代码块中使用；
                    在END中定义，可以在定义之后的END代码快中使用；
            3：接收外部变量：
                1：接收方式和使用区域：
                    1:定义方式：
                        变量名=$外部变量名
                        #需要将变量的获取放在'action'之后;如：awk 'BEGIN {print iv} {print iv} END {print iv}' iv=$out_var ./t.txt
                      使用区域：
                        可以在BEGIN、END、condition代码块中使用；

                    2:定义方式：
                        awk -v 变量名=$外部变量名
                        #需要在awk命令之后使用-v参数获取;如：awk -v iv=$out_var 'BEGIN {pint iv}  {print iv} END {print iv}' ./t.txt
                      使用区域：
                        可以在BEGIN、condition、END中使用；
        2：awk中的流程控制：
            1：条件判断语句：
                if(表达式)
                {
                    语句1;
                }
                else if(表达式)
                {
                    语句2;
                }
                else
                {
                    语句3;
                }
            2：循环语句：
                1：while循环：
                    while(表达式)
                    {
                        语句;
                    }
                    如：
                        while(i<10)
                        {
                            print i;
                        }
                2：for循环
                    for(变量 in 数组)
                    {
                        语句;
                    }
                    如：
                        for(i in ENVIRON)
                        {
                            print i"="ENVIRON[i];
                        }
                    或者：
                    for(变量;条件;表达式)
                    {
                        语句;
                    }
                    如：
                        for(i=0;i<10;i++)
                        {
                            print i;
                        }
                3：do循环:
                    do
                    {
                        语句;
                    }while(条件)
                    如：
                        do
                        {
                            print i;
                        }while(i<10)
                4：循环语句的退出：
                    break：退出当前循环，执行循环之后的内容
                    continue：结束当前循环，开始新一轮循环；
                    next：结束当前处理程序，读取下一行内容，重新执行condition中的处理程序；
                    exit：结束condition程序，进入END中执行END中的程序，如果没有定义END，那么结束执行本次脚本；
                
        3：awk中的运算符：
            1：算术运算：
                1：运算符：+ - * / % & ++ --；
                2：备注：使用算术运算时，操作数自动会转为数值，所有非数值会转换为0；
            2：赋值运算：
                1：运算符：= += -= *= /= %=
            3：逻辑运算：
                1：运算符：|| && !
            4：关系运算： 
                1：运算符：< <= > >= == !=
        
        4：awk中的数组：
            1：awk中的数组是关联索引数组，数组下标既可以是数字也可以是字符串
            2：awk中的数组使用之前不必声明，可以直接使用；
            3：数组的定义方式：
                array_name[1]="first_value"
                array_name[2]="second_value"
                或者：
                array_name["first"]="first_value"
                array_name["second"] = "second_value"
            4：数组相关函数：
                1：将字符串分割为数组：
                    split(str_var,array_var,split_tag)
                    功能：将字符串str_var使用split_tag分隔符分割至array_var中；
                    参数：str_var：字符串变量名或者字符串
                         array_var：数组变量名或者数组
                         split_tag：分隔符
                    返回值：返回数组长度；
                2：获取数组长度：
                    length(array_var)
                    功能：获取数组长度
                    参数：array_var：数组变量名
                    返回值：返回数组长度；
                3：检测键是否存在：
                    'key' in array_var
                    说明：不能使用array_var["key"]来检测键是否存在，在awk中，使用array_var["key"]时，将会自动创建名为key的键；其值为空；
                4：删除数组键：
                    delete array_var["key"]
                5：二维数组：
                    1：awk的二维数组在存储上仍然是一维数组，awk提供的二维数组仅仅只是逻辑上模拟的二维数组；
                    2：二维数组定义方式：
                        array_var[一维键值,二维键值]=值
                        如：
                            array_var[1,2]=3
                    3：二维数组的访问方式：
                        array_var[一维键值,二维键值]=值
                        如：
                            array_var[1,2]
                    4：二维数组的遍历方式：for(item in array_var)；
                        item是一维值和二维值通过\034连接起来的字符串，需要使用split分割之后得到一维坐标和二维坐标；
            5：数组遍历：
                1：如果数组本下标无序；使用for item in array遍历出来的是无序数组；如果需要使用有序数组，可使用for(i=0;i<10;i<++)来实现；
                2：对于awk3.1版本可以先使用asort或者asorti对数组进行排序，然后遍历：
                    asort(原数组名,排序之后的数组名);asort对数组排序仅仅只会对值排序，会丢掉原先的键；
                    asorti(原数组名，排序之后的数组名);asorti可以对键值整体进行排序；不会丢掉原先的键；
                
        5：awk中的字符串：
            1：awk中的字符串使用""来创建；
            2：字符串转数字：通过对字符串进行算术运算，字符串将会自动转换为整数，发现字符串第一个非数字字符将会立即停止转换；
            3：字符串转数组：split(str_var,arr_var,split_tag);使用split函数将字符串使用特定的分隔符分割为一个数组；
            4：数字砖字符串：awk中使用""将两个数字连接为一个字符串；
            5：字符连接操作：使用"+"或者""连接两个字符串；

        






