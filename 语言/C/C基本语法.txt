C基本部分：
    1：C语言简介
    2：C语言标准
    3：C程序执行流程
    4：C程序编译器

    一：C语言简介：
        1：C语言属于静态类型编程语言，具有严格的数据类型约束，能够直接对位，字节，内存地址进行操作，属于高级编程语言，但又可以创建偏底层的应用程序；
        2：C源程序在执行之前需要先编译链接为可执行文件；执行程序时需要由操作系统执行该可执行文件；
        3：C语言在编程方式上仅支持面向过程编程，不支持面向对象编程；
        4：相对于动态类型的脚本编程语言：
            优势：C语言由于严格的数据类型约束、提前进行编译链接为二进制的可执行文件、能够直接操作更底层的位，字节，内存地址等特性保证了C程序执行效率较高，并且程序错误会在编译阶段被发现，尽量能够避免执行时发生程序错误；
            劣势：动态类型的脚本编程语言：具有更符合应用场景的库，更简单快捷的编程方式，因此比C语言具有更高的编程效率；
    
    二：C语言标准：
        1：C89和C90标准：
            C89来源：ANSI在1989年批准通过了C语言语法规范以及C语言标准库，因此称之为C89标准或者ANSI C；
            C90来源：ISO在1990年采用ANSI批准通过的C语言语法规范及C标准库，因此称之为C90标准或者ISO C；
            C89标准和C90标准指的是同一个标准；该标准也是编译器支持度最高的标准；
        2：C99标准：
            C89/C90标准发布之后，C语言标准委员会又不断的改进C语言；并最终在1999年开发布了新的C语言标准，并称之为C99标准；
            C99标准引入了许多新的特性：内联函数、可变长度数组、灵活的数组成员、复合字面量、支持不定参数个数的宏定义，在数据类型上还引入了long long int以及复数类型等新特性；
            目前对C99标准的支持在GCC以及Clang都能达到90%以上，但是Visual Studio目前支持度并不是特别高；
        3：C11标准：
            C语言标准委员会在2011年发布了新的C语言标准，称之为C11标准；C11在C99的基础上又引入了字节对齐说明符，泛型机制，对多线程的支持、静态断言、原子操作以及对Unicode的支持等特性；
        4：目前尽量使用C89/C90标准或者C99标准，因为编译器对C11标准的支持程度有限，尽量避免使用；

    三：C程序执行流程：
        基本流程：
            由于C语言是静态类型编程语言，C源程序需要先被编译链接为可执行文件，然后在需要执行时由操作系统执行该可执行文件，由C源程序到可执行文件需要经过以下几个阶段：
                1：编写源程序；
                2：对源程序进行预处理操作，得到预处理文件；
                3：对预处理文件进行编译操作得到汇编文件；
                4：对汇编文件进行汇编操作得到二进制目标文件；
                5：对二进制目标文件链接操作得到二进制的可执行文件；
        详细流程：
            1：编写C源程序：
                1：通过C语言编写C程序文件，一个C源程序由一个或者多个C源文件组成，每一个C源文件都以.c作为后缀，每一个C源文件都由若干个函数和函数外的语句组成；
                2：一个C源程序必须要有且只能有一个主函数，如果C源程序由多个C源文件组成时，主函数可以放置在任意一个C源文件中；

            2：对源程序文件进行预处理，得到预处理文件：
                1：C源程序中一般会有#include包含头文件的代码，以及对宏的使用；将#include包含头文件的代码替换成头文件内容，将代码中的宏替换成宏的值，这个过程即为预处理；
                2：预处理完成之后得到的预处理文件中仍然是C代码，相比C源文件，仅仅只是将包含头文件的代码替换为头文件的内容，将宏替换为宏的值；并且仍然是文本文件；
                3：预处理文件以.i作为后缀；在linux中使用gcc编译器可以通过命令：gcc -E ./a.c -o ./a.i得到预处理文件；
            
            3：对预处理文件进行编译操作，得到汇编文件：
                1：将预处理之后得到的预处理文件编译之后即可得到特定汇编代码组成的文件；
                2：编译完成之后得到的汇编文件是由特定汇编代码组成的，仍然是文本文件；
                3：汇编文件以.s作为后缀，在linux中使用gcc编译器可以通过命令：gcc -S ./a.c -o ./a.s得到汇编文件；
            
            4：对汇编文件进行汇编操作，得到当前C源程序文件的二进制目标文件：
                1：将编译完成后的汇编文件转换成二进制的目标文件的过程称为汇编；
                2：汇编完成之后得到的目标文件是由二进制代码组成的，是二进制文件；
                3：汇编文件以.o作为后缀，在linux中使用gcc编译器可以通过命令：gcc -c ./a.s -o ./a.o得到目标文件；
            
            5：对二进制目标文件链接操作，得到二进制的可执行文件；
                1：一个可执行文件包括四个部分：
                    1：启动代码
                    2：使用到的库函数代码
                    3：当前C源文件汇编得到的目标文件
                    4：组成C源程序的其他C源文件汇编得到的目标文件；
                    上一步汇编完成之后只是得到了一个C当前源文件的目标文件，还缺少启动代码、引用到的库函数代码以及组成C源程序的其他C源文件的目标文件，所以还不能作为可执行文件运行起来；
                2：链接的过程即为将当前C源文件汇编得到的目标文件，启动代码，库函数代码和组成C源程序的其他C源文件的目标文件合并成为一个完整的可执行文件的过程；
                3：可执行文件以.out作为后缀，在linux中使用gcc编译器可以通过命令：gcc -o ./aim.out ./a.o ./b.o得到可执行文件；
                4：链接完成之后即可得到最终的可执行文件，在linux平台上以.out作为后缀，在windows平台上，以.exe作为后缀！由于linux平台对于文件后缀并无要求，因此.out可以省略；
        
    四：C语言编译器：
        Linux上的常用的编译器为：gcc（最终可执行文件的后缀名为.out，windows上的可执行文件后缀为.exe）
    
C语法部分：
    1：C语言语法基本要求
    2：C语言语法内容
    3：C语言标准库
    4：C语言高级部分

    一：C语言语法基本要求：
        1：C源程序的组成：
            1：一个C源程序可以由一个或者多个C源文件组成； 
            2：一个C源程序的每一个C源文件都以.c作为后缀；
            3：每一个C源文件都是由若干个函数以及若干个声明语句(头文件的包含、宏的定义、类型的定义、常量的定义，全局变量的声明、函数的声明、预处理语句)组成；
        
        2：程序执行方式：
            1：C程序执行时，从主函数开始执行，并从主函数结尾，并将执行状态以整数的形式返回给执行环境；
            2：一个C源程序必须要有并且只能有一个主函数；这个主函数可以放在任意一个C源文件中；
            3：源程序必须先编译链接为可执行文件，再由操作系统执行该可执行文件来执行程序；

        3：C主函数：
            1：一个C源程序必须要有，并且只能有一个主函数；
            2：如果一个C源程序由多个C源文件组成，那么主函数可以放在任意一个C源文件中；
            3：C程序执行时，从主函数开始执行，并从主函数结尾处结束执行；并将执行状态以整数的形式传递给执行环境；
            4：主函数的名称只能是main，不能自定义为其他名称；
            5：主函数的定义方式：
                标准定义方式：
                    1：int main(void){/* ... */}
                    2：int main(int argc,char *argv[]){/* ... */}
                非标准定义方式：
                    3：int main(int argc,char *argv[],char *envp[]){/* ... */}
            6：主函数的形参说明：
                1：按照标准方式定义，可以选择以第一种方式声明，即不接受任何参数，直接声明为void；
                2：按照标准方式定义，也可以选择以第二种方式声明，接收两个参数；其中：
                    int argc表示以命令行执行该程序的可执行文件时传入参数的个数；
                        如果没有传递任何参数时，其值为1，因为可执行文件本身的名称也算是一个参数；
                        如果有传入参数时，其值为参数个数+1；
                    char *argv[]：一个字符串数组，每一项都指向使用命令行执行该程序时传入的字符串参数；
                        其中argv[0]表示可执行文件的名称；
                        其余传入的参数可以通过argv[1]~argv[argc-1]获取；
                3：按照非标准形式定义时，会在第二种定义的方式上多一个envp参数，表示执行该可执行文件时的环境信息，若干个字符串，每一个字符串都以键值对的形式表示环境信息；该参数表示的环境信息也可以在程序中通过getenv()标准函数获取；
            7：主函数的执行结果：
                C源程序从主函数开始执行，也从主函数结尾处结束执行；在主函数执行结束后，会将执行状态以整数的形式传递给操作系统；
                1：返回值是0或者EXIT_SUCCESS，表示程序执行一切顺利；成功结束执行！
                2：返回值是任何其他非0值，尤其是EXIT_FAILURE，则表示程序执行时出现问题；并未成功执行完该程序；
                3：mian函数并非必须调用return显式的返回一个整数值，如果程序运行到main()的右' } '处，将会自动向执行环境返回状态值0，如果执行发生异常则将会自动向执行环境返回非0状态值；
                4：main()函数的结束等效于在主线程中调用标准库函数exit(),exit()的参数将会作为main()的返回值；

        4：C代码语法要求：
            1：以;作为语句结束符号；
            2：以{}作为代码块符号；
            3：以//作为单行注释，以/* ... */作为多行注释；
            4：标识符命名规范：
                1：以数字，字母，下划线组成；
                2：不能以数字开头；
                3：不能和关键字冲突；
                4：严格区分大小写；
                5：避免使用_或者__开头；
                6：避免使用拼音和英语混合式命名！
            5：一个C源文件结构上由两部分组成：1：函数、2：函数外部的语句；函数外部的语句只能是以下几种：头文件包含语句，宏的定义，类型的定义，常量的定义，全局变量的声明，函数的声明语句，预处理语句；其余具备运算能力或者逻辑处理能力的语句都必须放在函数内部！

    二：C语言基本语法内容：
        1：C语言输入输出    
        2：C语言变量：
        3：C语言常量：
        4：C语言运算：
        5：C语言流程控制：
        6：C语言基本数据类型：
        7：C语言基本数据类型转换：
        8：C语言复杂数据类型：
        9：C语言数据类型别名：
        10：C语言函数：
        11：C语言预处理：
        12：C语言错误处理：
        13：C语言断言：
        14：C语言可变参数：

    三：C语言标准库：

    四：C语言高级部分：
        1：C语言多文件编程
        2：C语言文件操作
        3：C语言内存操作
        4：C语言多线程编程
        5：C语言多进程编程
        6：C语言网络编程
       

