C语言中的文件：
    1：操作系统中，为了统一对各种硬件的操作并简化接口，硬件设备也被看成一个文件，对这些被映射为文件的硬件设备操作等同于对磁盘上的普通文件进行操作；
    2：常见的硬件设置和文件之间的映射关系：
        stdin：标准输入文件，一般指键盘，比如：scanf(),getchar()等默认是从stdin获取数据
        stdout：标准输出文件，一般指显示器，比如：printf(),puts(),putchar()等默认是向显示器输出数据
        stderr：标准错误文件，一般指显示器，比如perror()等函数默认向stderror输出数据
        stdprn：标准打印文件，一般指打印机
    3：C语言中操作文件内容步骤：
        1：具体步骤：
            打开文件>读写文件>关闭文件
        2：打开文件：
            所谓打开文件就是获取文件的有关信息，比如文件名称，文件状态，当前的读写位置等，并将这些信息保存至一个结构体变量中；
        3：关闭文件：
            所谓关闭文件，就是释放存放文件信息的结构体变量，同时禁止再对文件进行操作；
        4：文件读写：
            文件的读写对象可以是若干个字符、行、字节等，读写位置可以是开头、指定位置等
        5：文件流：
            1：文件流并不真实存在。仅仅只是对数据流向的一个抽象；
            2：数据从内存中存入文件的过程称之为输出流，数据从文件存入内存的过程称之为输入流；
    4：打开文件：
        1：打开文件的本质：
            C语言中打开文件，就是创建一个FILE类型的结构体变量，并将目标文件的信息(如：名称、大小、类型、权限等)存放到该结构体变量中；
        2：打开文件的方式：
            FILE * fopen(char * filename,char * mode);
            功能：打开一个文件，并将文件元信息存储在FILE结构体中；
            参数：filename：文件路径
                 mode：文件打开模式
            返回值：如果打开成功，则返回FILE类型结构体变量的地址；
                   如果打开失败返回NULL；
            备注：
                文件打开模式：
                    "r"：以 "只读" 的方式打开，要求文件必须存在
                    "w"：以 "写入" 的方式打开文件，如果文件不存在，则自动创建一个文件，如果文件已经存在，则清空文件内容；
                    "a"：以 "追加" 的方式打开文件，如果文件不存在，则自动创建一个文件，如果文件已经存在，则在文件末尾追加内容；
                    "r+"：以 "读写" 的方式打开，既可读也可写，要求文件必须存在；
                    "w+"：以 "读写" 的方式打开，既可读也可写，如果文件不存在，将会自动创建文件；如果文件已存在，则清空文件内容；
                    "a+"：以 "读写" 的方式打开，既可读也可写，如果文件不存在，将会自动创建文件；如果文件已存在，则在文件末尾追加内容；
                文件打开方式：
                    "t"：以打开文本文件方式打开，默认打开方式，可以不写；
                    "b"：以二进制文件方式打开，默认打开方式，可以不写；

    5：关闭文件：
        1：关闭文件的本质：
            C语言中关闭文件，就是保存对文件的修改，并销毁存放文件元信息的FILE结构体类型变量；
        2：关闭文件的方式：
            int fclose(FILE *fp)
            功能：关闭文件
            参数：FILE类型结构体变量地址
            返回值：如果关闭成功，返回0，否则返回非0值；

    6：文件读写：
        1：跟文件读取相关的概念：
            EOF：
                1：表示文件末尾；在stdio.h中定义的宏，值是一个负数，一般是-1；
                2：有很多函数，在读取文件出错时也返回EOF，因此当读取文件时收到返回的EOF并不能完全说明读取到文件末尾，需要使用feof()函数和ferror()函数判断；
                3：feof():
                    原型：int feof(FILE *fp)
                    参数：fp：文件打开之后返回的FILE结构体变量地址；
                    返回值：指向文件末尾时返回非0值，否则返回0；
                4：ferror():
                    原型：int ferror(FILE *fp)
                    参数：fp：文件打开之后返回的FILE结构体变量地址；
                    返回值：如果文件读取出错，返回非0值，否则返回0值；
            文件指针：
                1：文件指针并非程序中的指针，该指针只是一个指示标志，表示当前读取到文件的第几个字节；无需程序管理，文件指针在打开文件时由系统自动设置，读取时可以通过函数手动设置；
        
        2：按照字符操作文件：
            1：从文件中读取一个字符：
                int fgetc(FILE *fp)
                功能：从文件中读取一个字符；
                参数：fp：文件打开之后返回的FILE结构体变量地址；
                返回值：如果读取成功，返回字符，如果读取失败或者已经读取至文件末尾，则返回EOF；
                备注：
                    1：fgetc一次只能读取一个字符，每读取一个字符，文件指针向后移动一位，直至文件读取结束；
            2：向文件中写入一个字符：
                int fputc(int ch,FILE *fp)
                功能：向文件中写入字符
                参数：ch：待写入的字符
                     fp：被写入文件打开之后返回的FILE结构体变量地址；
                返回值：写入成功，返回写入的字符，写入失败，返回EOF；
                备注：
                    1：写入文件时，可以使用w,a,r+,w+,a+模式打开；其中w,w+,r+均会清理掉文件内容，并从头写入文件；a,a+会以追加的方式写入文件；
                    2：每写入一个字符，文件指针向后移动一个字节；
        3：按照字符串操作文件：
            1：从文件中读取字符串：
                char *fgets(char *str,int n,FILE *fp)
                功能：从文件中读取一个字符串
                参数：str：字符数组，用来存放读取到的内容
                     n：读取的字符串长度，即字符数目；
                     fp：文件打开之后返回的FILE结构体变量地址；
                返回值：读取成功，返回读取到的字符串首地址，即字符数组str的地址；
                       读取失败，返回NULL；如果读取不到任何字符，也返回NULL；
                备注：
                    1：该函数在读取到n-1个字符之前，如果出现了换行，或者读取到了文件末尾，则读取结束；因此无论n值有多大，最多只能读取一行的数据，不能跨行；
                    2：C语言中没有按行读取的函数，可以借助fgets()将n设置的足够大，那么就可读取到一行的数据；
            2：向文件中写入字符串：


        


